= PML Rouge Lexer
include::_attr-header.adoc[]
:rouge-style: pml-test-theme

In this document we'll focus on specific elements of the PML syntax, one element per section, in order to check that they are rendered properly by the lexer and theme.
For each element, we'll also mention it's Rouge token name and its corresponding HTML/CSS class.

For better visual inspection, we'll be using a custom Rouge theme here, designed to cover all the syntax elements of the PML lexer.

// CUSTOM ATTRIBUTES:
:manURL: https://www.pml-lang.dev/docs/reference_manual/index.html#
:manRef: PML Reference Manual »
:guideURL: https://www.pml-lang.dev/docs/user_manual/index.html#
:guideRef: PML User Manual »

[source,pml]
-------------------------
include::pml-sample.pml[]
-------------------------


== Comments

[horizontal]
Lexer class :: `Comment::Multiline`
CSS class   :: `cm`

link:{manURL}ch__12[PML comments^,title="{manRef} Comments"]
are node blocks which can be nested to any level.
The node has no attributes, and any PML nodes (other than further comment blocks) inside comments will be ignored by the PML Converter.

.Comments Examples
[source,pml]
---------------------------------------
Hello [- comment -] world.

All comments are block comments [-
  Comment block.
  Spanning multiple lines
  -] in PML.

Comments are nestable [- outer comment [- nested comment -] -] in PML.
---------------------------------------

Let's test that comments nesting is working correctly:

.Nested Comments Test
[source,pml]
---------------------------------------
normal text [-[--] comment -] normal text

normal text [-[--] comment
still a comment
because the outer comment was never closed!
---------------------------------------


== Escapes

[horizontal]
Lexer class :: `Literal::String::Escape` (short: `Str::Escape`)
CSS class   :: `se`


link:{guideURL}ch__10[PML escape sequences^,title="{guideRef} Escaping Reserved Characters"]
are achieved by preceding with a ``\`` the reserved characters ``[``,  ``]``,  ``=`` and  ``\``, or a ``{quot}`` inside double-quoted strings.


.Escapes Example
[source,pml]
---------------------------------------
File path \= C:\\tests\\example.txt

Instead of writing \\, we have to write \\\\

Instead of writing \[, we have to write \\\[
---------------------------------------


== Constant Parameter

[horizontal]
Lexer class :: `Keyword::Pseudo`
CSS class   :: `kp`

link:{manURL}node_const[Constant parameters^,title="{manRef} Constant Parameter"]
are a powerful substitution mechanism.

.Parameters Example
[source,pml]
---------------------------------------
[!set examples_root = http://www.example.com/project/source_code/examples]

Here are two examples:

[link url=[!get examples_root]/ex1.html text=example 1]

[link url=[!get examples_root]/ex2.html text=example 2].
---------------------------------------

Custom IDs definitions in PML are limited to the RegEx pattern ``[a-zA-Z][a-zA-Z0-9_]*``, and the Rouge lexer will mark as `Error` any references to invalid parameter IDs:

.Invalid Parameter ID Example
[source,pml]
---------------------------------------
[!set invalid.param.id = something]

Let me tell you [!get invalid.param.id]
---------------------------------------

[NOTE]
===========
In the future PML will allow custom IDs to be names as in the XML standard.
===========


== Nodes

[horizontal]
Lexer class :: `Name::Tag`
CSS class   :: `nt`

Right now, the PML lexer captures all nodes in the same manner, as long as the node has a valid tag (i.e. a known one).
In the future, the lexer will handle nodes differently, according to need.

.Valid Node Example
[source,pml]
---------------------------------------
Hello [b world ].
---------------------------------------

Invalid (i.e. unknown) nodes are marked as `Error`, including their closing `]` delimiter, which is tracked throughout nodes nesting, as the following example demonstrates:

.Invalid Node Example
[source,pml]
---------------------------------------
Hello [xyz world ].

Hello [b brave [xyz new ] ] world.

Hello [b brave
        [xyz new
          [i world ]
        ]
      ].
---------------------------------------


.Edge Cases Test
[source,pml]
---------------------------------------
Hello [b brave \] new ] world.
---------------------------------------


== Italic and Bold

Text inside `[i` and `[b` is rendered in _emphasis_ and _strong_ style, respectively.

.Italic and Bold Examples
[source,pml]
---------------------------------------
Some [i italic text ].

Some [b bold text ].
---------------------------------------

Since text can't be styled as both _emphasis_ and _strong_, italic is given precedence when both should apply.


.Overlapping Italic and Bold Examples
[source,pml]
---------------------------------------
Overlapping [i italic and [b bold text ]], and back to normal.

Overlapping [b bold and [i italic text ]], and back to normal.
---------------------------------------


The lexer is able to correctly track `[i` and `[b` nesting:

.Nested Italic and Bold Test
[source,pml]
---------------------------------------
Nested [i italics [i example]], normal.

Nested [b bold [b example]], normal.

Nested [b bold [i bold+italic [b bold+italic+bold ]] bold again], normal.

Nested [i italic [b italic+bold [b italic+bold+bold ]] italic again], normal.
---------------------------------------

[discrete]
=== Leak Tests

Because nesting of `[i` and `[b` nodes is tracked via numeric variables, and because Rake is attached to Asciidoctor as an extension which is kept open for the whole session, an unclosed `[i` or `[b` node might leak into the next code block highlighting if their tracking variables aren't reset at each Rake invocation via the `Rouge::RegexLexer.start` method.

.Unclosed Italic Example
[source,pml]
---------------------------------------
Text [i italic
---------------------------------------

The next block _must not_ be in italic:

.Unclosed Italic Leak Test
[source,pml]
---------------------------------------
Text must be normal.
---------------------------------------


.Unclosed Bold Example
[source,pml]
---------------------------------------
Text [b bold
---------------------------------------

The next block _must not_ be in bold:

.Unclosed Bold Leak Test
[source,pml]
---------------------------------------
Text must be normal.
---------------------------------------



// EOF //
